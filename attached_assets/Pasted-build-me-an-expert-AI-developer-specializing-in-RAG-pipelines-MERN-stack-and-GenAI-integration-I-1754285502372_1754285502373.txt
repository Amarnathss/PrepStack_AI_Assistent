build me an expert AI developer specializing in RAG pipelines, MERN stack, and GenAI integration.
I want to build my own Personal Placement Assistant with the following requirements:

Core Features
Notes Retrieval

Upload my notes on DBMS, CN, OS, OOPS, SQL (PDF/Markdown/Docx).

Should allow me to search and query my notes using natural language (RAG). Example: “What is two-phase locking in DBMS?”.

Exclusive GitHub Project Access

Connect to my private GitHub repositories (with personal access token).

Retrieve and explain code snippets or provide summaries of my own projects (like: “Explain my movie management project backend flow”).

College Placement Data Access

Store previous years’ placement questions (PDF/Excel/DB).

Query by company name, topic, or difficulty (Example: “Give me all Amazon coding questions of last 2 years”).

Placement Prep Support

Provide curated DSA practice sets from my stored solved problems and previous year data.

Resume tips and mock HR questions (optional advanced feature).

Tech Stack
Frontend: React (Vite + Tailwind + Redux Toolkit Query)

Backend: Python (FastAPI preferred)

Database:

MongoDB (for user metadata, solved problems, company-wise placement data)

Vector DB (FAISS or Weaviate) for embeddings of notes and placement questions

LLM Model: grok

Auth: JWT (only I have access)

Functional Flow
Upload notes & placement data → Embeddings → Vector DB

Frontend React app → API → Python backend (RAG pipeline) → LLM response

GitHub code search uses GitHub API to fetch and embed repo code (only my repos).

Deliverables
Backend (Python + FastAPI)

Endpoints: Upload docs, search notes, search placement data, fetch GitHub repo summary, chat endpoint.

Integrate vector search + LLM (OpenAI / Hugging Face).

Frontend (React)

Login screen (JWT Auth)

Dashboard:

Notes Search

Placement Q&A

My GitHub Project Insights

Chat interface with conversation history.

Deployment Ready (Dockerized, with environment variables)

Development Approach
Step 1: Setup Python FastAPI + MongoDB + FAISS

Step 2: Implement doc embedding and retrieval

Step 3: Setup GitHub API integration and code embedding

Step 4: Build React frontend (Tailwind + RTK Query)

Step 5: JWT auth & secure endpoints

Step 6: Deploy to Render/Heroku (or Docker Compose)

Expectations
Provide me with clean code, modular structure, and documentation.

The output should include:

Directory structure

Code for backend & frontend

Instructions to run locally

Suggestions to extend in future (like adding resume feedback, HR Q chatbot).

Goal
A personalized, private, placement-focused RAG assistant that combines my notes, GitHub projects, and placement data into one unified assistant, built with React frontend and Python backend.